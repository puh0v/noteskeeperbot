package com.tgbot.noteskeeperbot.commands.notes;

import com.tgbot.noteskeeperbot.database.entity.NotesEntity;
import com.tgbot.noteskeeperbot.commands.Commands;
import com.tgbot.noteskeeperbot.commands.FlagManager;
import com.tgbot.noteskeeperbot.database.repository.NoteRepository;
import com.tgbot.noteskeeperbot.services.receiver.TelegramBotService;
import com.tgbot.noteskeeperbot.commands.notes.ui.CallbackButtons;
import com.tgbot.noteskeeperbot.services.messagesender.MessageSender;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

import java.time.Instant;
import java.util.List;

@Component
public class AddNote implements Commands {

    private final NoteRepository noteRepository;
    private final FlagManager flagManager;
    private final CallbackButtons callbackButtons;
    private final MessageSender messageSender;
    private static final Logger logger = LoggerFactory.getLogger(AddNote.class);

    public AddNote(NoteRepository noteRepository, FlagManager flagManager, CallbackButtons callbackButtons, MessageSender messageSender) {
        this.noteRepository = noteRepository;
        this.flagManager = flagManager;
        this.callbackButtons = callbackButtons;
        this.messageSender = messageSender;
    }

    @Override
    public String getCommandName() {
        return "/add_note";
    }

    @Override
    public void execute(Long userId, String userMessage, Update update, TelegramBotService telegramBotService) {

        if (userMessage.equals(getCommandName())) {
            logger.info("[AddNote] –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ...", getCommandName(), userId);

            flagManager.resetFlag(userId);
            SendMessage message = new SendMessage(userId.toString(), "‚úè\uFE0F –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏");

            InlineKeyboardButton cancel = callbackButtons.cancelButton();
            List<InlineKeyboardButton> cancelButton = List.of(cancel);
            List<List<InlineKeyboardButton>> rows = List.of(cancelButton);

            InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
            inlineKeyboardMarkup.setKeyboard(rows);

            message.setReplyMarkup(inlineKeyboardMarkup);
            messageSender.sendMessageToUser(userId, message, telegramBotService);

            flagManager.setFlag(userId, getCommandName());

        } else if (flagManager.flagHasThisCommand(userId, getCommandName())) {

            if (userMessage.equals("/cancel")) {
                logger.info("[AddNote] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏. –§–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...", userId);

                SendMessage message = new SendMessage(userId.toString(), "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏");

                InlineKeyboardButton mainMenu = callbackButtons.mainMenuButton();
                List<InlineKeyboardButton> mainMenuButton = List.of(mainMenu);
                List<List<InlineKeyboardButton>> rows = List.of(mainMenuButton);

                InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
                inlineKeyboardMarkup.setKeyboard(rows);

                message.setReplyMarkup(inlineKeyboardMarkup);
                messageSender.sendMessageToUser(userId, message, telegramBotService);

                flagManager.resetFlag(userId);

            } else {
                logger.info("[AddNote] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–∏—Å–ª–∞–ª –∑–∞–º–µ—Ç–∫—É...", userId);

                addNote(userId, userMessage, telegramBotService);

                // –°–ë–†–û–° –§–õ–ê–ì–ê –ù–ê–•–û–î–ò–¢–°–Ø –í–ù–£–¢–†–ò –ú–ï–¢–û–î–ê
            }
        }
    }

    public void addNote(Long userId, String userMessage, TelegramBotService telegramBotService) {
        logger.info("[AddNote] –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫...", userId);

        SendMessage message;

        if (userMessage.length() > 1000) {
            logger.info("[AddNote] –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø—Ä–µ—à—ã–≤–∞–µ—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤. –§–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º...", userId);

            message = new SendMessage(userId.toString(), "–•–º... –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —É–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∫–∞, –∞ —Ü–µ–ª—ã–π —Ä–æ–º–∞–Ω üòÖ\n\n" +
            "‚úè\uFE0F –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –µ—â—ë —Ä–∞–∑.");

            messageSender.sendMessageToUser(userId, message, telegramBotService);
            return;

        } else {
            logger.info("[AddNote] –û–¥–æ–±—Ä–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} . –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...", userId);

            message = new SendMessage(userId.toString(), "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        }

        InlineKeyboardButton addNote = callbackButtons.addNoteButton();
        addNote.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É");

        List<InlineKeyboardButton> addNoteButton = List.of(addNote);
        List<InlineKeyboardButton> myNotesButton = List.of(callbackButtons.myNotesButton());
        List<InlineKeyboardButton> mainMenuButton = List.of(callbackButtons.mainMenuButton());
        List<List<InlineKeyboardButton>> rows = List.of(addNoteButton, myNotesButton, mainMenuButton);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rows);

        message.setReplyMarkup(inlineKeyboardMarkup);

        logger.info("[AddNote] –î–æ–±–∞–≤–ª—è—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ –ë–î...", userId);
        try {
            NotesEntity noteEntity = new NotesEntity();
            noteEntity.setUserId(userId);
            noteEntity.setNoteText(userMessage);
            noteEntity.setCreatedAt(Instant.now());
            noteRepository.save(noteEntity);

        } catch (Exception e) {
            logger.error("[AddNote] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} : {}", userId, e.getMessage(), e);
            return;
        }
        logger.info("[AddNote] –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î!", userId);

        messageSender.sendMessageToUser(userId, message, telegramBotService);
        flagManager.resetFlag(userId);
    }
}