package com.tgbot.noteskeeperbot.commands.notes;

import com.tgbot.noteskeeperbot.commands.Commands;
import com.tgbot.noteskeeperbot.commands.FlagManager;
import com.tgbot.noteskeeperbot.services.noteservice.NoteService;
import com.tgbot.noteskeeperbot.services.receiver.TelegramBotService;
import com.tgbot.noteskeeperbot.commands.notes.ui.CallbackButtons;
import com.tgbot.noteskeeperbot.services.messagesender.MessageSender;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

import java.util.List;

/** –ö–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. */
@Component
public class AddNote implements Commands {

    private final NoteService noteService;
    private final FlagManager flagManager;
    private final CallbackButtons callbackButtons;
    private final MessageSender messageSender;
    private static final Logger logger = LoggerFactory.getLogger(AddNote.class);

    public AddNote(NoteService noteService, FlagManager flagManager, CallbackButtons callbackButtons, MessageSender messageSender) {
        this.noteService = noteService;
        this.flagManager = flagManager;
        this.callbackButtons = callbackButtons;
        this.messageSender = messageSender;
    }

    @Override
    public String getCommandName() {
        return "/add_note";
    }

    @Override
    public void execute(Long userId, String userMessage, Update update, TelegramBotService telegramBotService) {
        prepareMessage(telegramBotService, userId, userMessage);
    }

    /** –ú–µ—Ç–æ–¥ prepareMessage() –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –±–ª–æ–∫ –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
     * –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É, –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏, –∏ —Ç.–¥.*/
    private void prepareMessage(TelegramBotService telegramBotService, Long userId, String userMessage) {
        if (userMessage.equals(getCommandName())) {
            logger.info("[AddNote] –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} ...", getCommandName(), userId);

            handleCommand(telegramBotService, userId);

        } else if (flagManager.flagContainsCommand(userId, getCommandName())) {
            if (userMessage.equals("/cancel")) {
                logger.info("[AddNote] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏. –§–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...", userId);

                SendMessage message = messageSender.createMessage(userId, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏");

                InlineKeyboardMarkup inlineKeyboardMarkup = getButtonsInCaseOfCancel();
                message.setReplyMarkup(inlineKeyboardMarkup);

                messageSender.sendMessageToUser(userId, message, telegramBotService);
                flagManager.resetFlag(userId);

            } else {
                logger.info("[AddNote] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–∏—Å–ª–∞–ª –∑–∞–º–µ—Ç–∫—É...", userId);
                addNote(userId, userMessage, telegramBotService);
            }
        }
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_note */
    private void handleCommand(TelegramBotService telegramBotService, Long userId) {
        flagManager.resetFlag(userId);
        SendMessage message = messageSender.createMessage(userId, "‚úè\uFE0F –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏");

        InlineKeyboardMarkup inlineKeyboardMarkup = getCancelButton();
        message.setReplyMarkup(inlineKeyboardMarkup);

        messageSender.sendMessageToUser(userId, message, telegramBotService);
        flagManager.setFlag(userId, this);
    }

    /** –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    private void addNote(Long userId, String userMessage, TelegramBotService telegramBotService) {
        logger.info("[AddNote] –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫...", userId);

        if (userMessage.length() > 1000) {
            logger.info("[AddNote] –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤. –§–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º...", userId);

            SendMessage message = messageSender.createMessage(userId, "–•–º... –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —É–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∫–∞, –∞ —Ü–µ–ª—ã–π —Ä–æ–º–∞–Ω üòÖ\n\n" +
                    "‚úè\uFE0F –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –µ—â—ë —Ä–∞–∑.");

            messageSender.sendMessageToUser(userId, message, telegramBotService);

        } else if (!userMessage.isBlank()) {
            saveNote(telegramBotService, userId, userMessage);
        }
    }

    /** –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î*/
    private void saveNote(TelegramBotService telegramBotService, Long userId, String userMessage) {
        logger.info("[AddNote] –û–¥–æ–±—Ä–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} . –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...", userId);

        try {
            noteService.saveNote(userId, userMessage);
        } catch (DataAccessException e) {
            logger.error("[AddNote] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –ë–î —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} : {}", userId, e.getMessage(), e);
            SendMessage message = messageSender.createMessage(userId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");


            InlineKeyboardMarkup inlineKeyboardMarkup = getButtonsInCaseOfCancel();
            message.setReplyMarkup(inlineKeyboardMarkup);

            messageSender.sendMessageToUser(userId, message, telegramBotService);
            return;
        }
        logger.info("[AddNote] –ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î!", userId);

        SendMessage message = messageSender.createMessage(userId, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");

        InlineKeyboardMarkup inlineKeyboardMarkup = getButtonsInCaseOfAddedNote();
        message.setReplyMarkup(inlineKeyboardMarkup);

        messageSender.sendMessageToUser(userId, message, telegramBotService);
        flagManager.resetFlag(userId);
    }


    /** –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫*/
    private InlineKeyboardMarkup getButtonsInCaseOfAddedNote() {
        InlineKeyboardButton addNote = callbackButtons.addNoteButton();
        addNote.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É");

        List<InlineKeyboardButton> addNoteButton = List.of(addNote);
        List<InlineKeyboardButton> myNotesButton = List.of(callbackButtons.myNotesButton());
        List<InlineKeyboardButton> mainMenuButton = List.of(callbackButtons.mainMenuButton());
        List<List<InlineKeyboardButton>> rows = List.of(addNoteButton, myNotesButton, mainMenuButton);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getButtonsInCaseOfCancel() {
        InlineKeyboardButton mainMenu = callbackButtons.mainMenuButton();
        List<InlineKeyboardButton> mainMenuButton = List.of(mainMenu);
        List<List<InlineKeyboardButton>> rows = List.of(mainMenuButton);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getCancelButton() {
        List<InlineKeyboardButton> cancelButton = List.of(callbackButtons.cancelButton());
        List<List<InlineKeyboardButton>> rows = List.of(cancelButton);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rows);

        return inlineKeyboardMarkup;
    }
}